// Procedural Generation Sudo-Code

//Started on 2015-08-31 by Andrew Lonsway

//Goal: To create a way to procedurally generate the world which the player will encounter, and balance performance

public gameobject small_ship;
public gameobject large_ship;
public gameobject small_debris;
public gameobject med_debris;
public gameobject large_debris;
public gameobject small_loot;
public gameobject med_loot;
public gameobject large1_loot;
public gameobject large2_loot;
public gameobject large3_loot;

public gameobject laser;
public gameobject emp;
public gameobject airjet;

public gameobject chaser;
public gameobject spinturret;
public gameobject EMPTurret;
public gameobject DMGTurret;

//chance values must be small, at least .05 for now

public float small_ship_chance 
public float large_ship_chance
public float small_debris_chance
public float med_debris_chance
public float large_debris_chance
public float small_loot_chance
public float med_loot_chance
public float large1_loot_chance 
public float large2_loot_chance 
public float large3_loot_chance 

public float inside_small_loot_chance
public float inside_med_loot_chance
public float inside_large1_loot_chance 
public float inside_large2_loot_chance 
public float inside_large3_loot_chance 

public float inside_debris_chance;

public float inside_hazard_laser_chance;
public float inside_hazard_emp_chance;
public float inside_hazard_airjet_chance;

public float inside_enemy_spinturret_chance;
public float inside_enemy_DMGTurret_chance;
public float inside_enemy_EMPTurret_chance;
public float inside_enemy_chaser_chance;

public float density  //density of each builds
public float initial_distance //how big we spawn the beginning




void Start() {
	//we load up the initial level, which will consist of the player, the ship, the guitext, a random gameobject containing this script, and the camera.
	//camera has the focus set to the player, the ship has the focus set to the player
	Generate(initial_distance * -1, initial_distance * -1, initial_distance, initial_distance); //generate a square of width = initial_distance * 2;
	
}
void Generate(int startX, int startY, int endX, int endY) { // generate from (startX, startY) to (endX, endY)
	for (float i = startX * -1; i < endX; i+= density * (random)) {
		for (float j = startY * -1; j < endY; j+= density) * (random) {
			//the spot focused on now will be (i, j)
			FindToGenerate(i, j);
		}
	}
}
void SpawnInside(GameObject g) {
		/*	Each prefab will have a script called "SpawnVals" and several values such as
		/	int count;
		/	bool enemies;
		/	bool hazards;
		/	and several gameobjects as spawners, with the name as spawner and a script "spawner" and rotations/positions
		/	script spawner has several values for weighted spawns such as 
		/	float hazard_chance
		/	float turret_chance
		/	float all_loot_chance
		*/
		
		GameObject[g.getComponent<SpawnVals>().count] spawners;
		
		int i = 0;
		foreach (transform c in g.GetComponentsInChildren<Transform>()) {
			if (c.name == "Spawner") {
				spawners[i] = c;
				i++;
			}
		}
		//These values are subject for later level design, so things aren't 100% random and some weighted chance will happen for challenges
		float tmp_inside_hazard_laser_chance = inside_hazard_laser_chance;
		float tmp_inside_hazard_emp_chance = inside_hazard_emp_chance;
		float tmp_inside_loot_chance = inside_small_loot_chance;
		float tmp_inside_hazard_airjet_chance = inside_hazard_airject_chance;
		float tmp_inside_enemy_chaser_chance = inside_enemy_chaser_chance;
		
		/*	Each item will have its own inside chance, and for some, more will spawn to take their place
		/	The chances will increase for each challenge spawned, and for some loot as well.
		/	Each item will have its own weighted chances as well from the spawner script itself
		/	So once again, the 2 factors at most will be weighted chance and spawner chance.
		*/
		foreach (gameobject c in spawners) {
			// spawn small_loot
			if (Random.value < (tmp_inside_loot_chance + inside_small_loot_chance + c.getComponent<Spawner>().all_loot_chance)) {
				GameObject thingy = (GameObject)Instantiate(small_loot, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				continue;
			}
			// spawn med loot
			if (Random.value < (tmp_inside_loot_chance + inside_med_loot_chance + c.getComponent<Spawner>().all_loot_chance)) {
				GameObject thingy = (GameObject)Instantiate(med_loot, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				tmp_inside_loot_chance *= 1.5;
				continue;
			}
			// spawn large1 loot
			if (Random.value < (tmp_inside_loot_chance + inside_large1_loot_chance + c.getComponent<Spawner>().all_loot_chance)) {
				GameObject thingy = (GameObject)Instantiate(large1_loot, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				tmp_inside_loot_chance *= 1.5;
				continue;
			}
			// spawn large2 loot
			if (Random.value < (tmp_inside_loot_chance + inside_large2_loot_chance + c.getComponent<Spawner>().all_loot_chance)) {
				GameObject thingy = (GameObject)Instantiate(large2_loot, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				tmp_inside_loot_chance *= 2;
				continue;
			}
			// spawn large3 loot
			if (Random.value < (tmp_inside_loot_chance + inside_large2_loot_chance + c.getComponent<Spawner>().all_loot_chance)) {
				GameObject thingy = (GameObject)Instantiate(large2_loot, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				tmp_inside_loot_chance *= 3;
				continue;
			}
			// spawn debris chance
			if (Random.value < (inside_debris_chance)) {
				GameObject thingy = (GameObject)Instantiate(small_debris, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				continue;
			}
			// spawn laser hazard_chance
			if (Random.value < (tmp_inside_hazard_laser_chance + c.getComponent<Spawner>().hazard_chance)) {
				GameObject thingy = (GameObject)Instantiate(laser, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				tmp_inside_hazard_laser_chance *= 5;
				continue;
			}
			// spawn emp 
			if (Random.value < (tmp_inside_hazard_emp_chance + c.getComponent<Spawner>().hazard_chance)) {
				GameObject thingy = (GameObject)Instantiate(emp, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				tmp_inside_hazard_emp_chance *= 5;
				continue;
			}
			// spawn airjet
			if (Random.value < (tmp_inside_hazard_airjet_chance + c.getComponent<Spawner>().hazard_chance)) {
				GameObject thingy = (GameObject)Instantiate(airjet, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				tmp_inside_hazard_airjet_chance *= 5;
				continue;
			}
			// spawn spinturret
			if (Random.value < (inside_enemy_spinturret_chance + c.getComponent<Spawner>().turret_chance)) {
				GameObject thingy = (GameObject)Instantiate(spinturret, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				continue;
			}
			// spawn dmgturret
			if (Random.value < (inside_enemy_DMGturret_chance + c.getComponent<Spawner>().turret_chance)) {
				GameObject thingy = (GameObject)Instantiate(DMGTurret, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				continue;
			}
			// spawn empturret
			if (Random.value < (inside_enemy_EMPturret_chance + c.getComponent<Spawner>().turret_chance)) {
				GameObject thingy = (GameObject)Instantiate(EMPTurret, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				continue;
			}
			// spawn chaser
			if (Random.value < (tmp_inside_enemy_chaser_chance + c.getComponent<Spawner>().turret_chance)) {
				GameObject thingy = (GameObject)Instantiate(chaser, c.transform.position, Quaternion.identity);
				thingy.transform = c.transform;
				tmp_inside_enemy_chaser_chance *= 5;
			}
			
		}
		
}

void FindToGenerate(float i, float j) { //separate so we can use it later on
			if (Random.value == small_ship_chance) {
				//spawn small ship
				GameObject thingy = (GameObject)Instantiate(small_ship, new Vector3(i, j, 0), Quaternion.identity);
				SpawnInside(thingy);
				continue;
			} 
			if (Random.value == large_ship_chance) {
				GameObject thingy = (GameObject)Instantiate(large_ship, new Vector3(i, j, 0), Quaternion.identity);
				SpawnInside(thingy);
				continue;
			}
			if (Random.value == small_debris_chance) { //cannot spawn inside
				GameObject thingy = (GameObject)Instantiate(small_debris, new Vector3(i, j, 0), Quaternion.identity);
				continue;
			}
			if (Random.value == med_debris_chance) {
				GameObject thingy = (GameObject)Instantiate(med_debris, new Vector3(i, j, 0), Quaternion.identity);
				SpawnInside(thingy);
				continue;
			}
			if (Random.value == large_debris_chance) {
				GameObject thingy = (GameObject)Instantiate(large_debris, new Vector3(i, j, 0), Quaternion.identity);
				SpawnInside(thingy);
				continue;
			}
			if (Random.value == small_loot_chance) { //cannot spawn inside, may spawn some debris around it
				GameObject thingy = (GameObject)Instantiate(small_loot, new Vector3(i, j, 0), Quaternion.identity);
				SpawnInside(thingy);
				continue;
			}
			if (Random.value == med_loot_chance) {
				GameObject thingy = (GameObject)Instantiate(med_loot, new Vector3(i, j, 0), Quaternion.identity);
				SpawnInside(thingy);
				continue;
			}
			if (Random.value == large1_loot_chance) {
				GameObject thingy = (GameObject)Instantiate(large1_loot, new Vector3(i, j, 0), Quaternion.identity);
				SpawnInside(thingy);
				continue;
			}
			if (Random.value == large2_loot_chance) {
				GameObject thingy = (GameObject)Instantiate(large2_loot, new Vector3(i, j, 0), Quaternion.identity);
				SpawnInside(thingy);
				continue;
			}
			if (Random.value == large3_loot_chance) {
				GameObject thingy = (GameObject)Instantiate(large3_loot, new Vector3(i, j, 0), Quaternion.identity);
				SpawnInside(thingy);
				continue;
			}
}

void Update() {
	//update area outside
}